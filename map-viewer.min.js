const MAPTILER_API_KEY="qViRNrVhwZEkj1UW0AeD",CONSTANTS={COLORS:{BASE:"rgba(216, 180, 254, 0.6)",HOVER:"rgba(147, 51, 234, 0.8)",BORDER:"#FFFFFF"},TIMING:{ZOOM_DURATION:1e3,POPUP_DELAY:200},ZOOM:{MIN:11,MAX:20},MAPTILER_STYLES:[{name:"Basic",url:`https://api.maptiler.com/maps/basic-v2/style.json?key=${MAPTILER_API_KEY}`},{name:"Streets",url:`https://api.maptiler.com/maps/streets-v2/style.json?key=${MAPTILER_API_KEY}`},{name:"Backdrop",url:`https://api.maptiler.com/maps/backdrop/style.json?key=${MAPTILER_API_KEY}`},{name:"Bright",url:`https://api.maptiler.com/maps/bright-v2/style.json?key=${MAPTILER_API_KEY}`},{name:"DataViz",url:`https://api.maptiler.com/maps/dataviz/style.json?key=${MAPTILER_API_KEY}`},{name:"Toner",url:`https://api.maptiler.com/maps/toner-v2/style.json?key=${MAPTILER_API_KEY}`},{name:"Satellite",url:`https://api.maptiler.com/maps/satellite/style.json?key=${MAPTILER_API_KEY}`},{name:"Hybrid",url:`https://api.maptiler.com/maps/hybrid/style.json?key=${MAPTILER_API_KEY}`},{name:"Outdoor",url:`https://api.maptiler.com/maps/outdoor-v2/style.json?key=${MAPTILER_API_KEY}`},{name:"Winter",url:`https://api.maptiler.com/maps/winter-v2/style.json?key=${MAPTILER_API_KEY}`},{name:"OpenStreetMap",url:`https://api.maptiler.com/maps/openstreetmap/style.json?key=${MAPTILER_API_KEY}`},{name:"Topo",url:`https://api.maptiler.com/maps/topo-v2/style.json?key=${MAPTILER_API_KEY}`},{name:"Ocean",url:`https://api.maptiler.com/maps/ocean/style.json?key=${MAPTILER_API_KEY}`},{name:"C1",url:"custom-dataviz",isCustom:!0,baseStyle:"dataviz",textStyle:"basic"},{name:"C2",url:"custom-backdrop",isCustom:!0,baseStyle:"backdrop",textStyle:"basic"}]};class MapLibreBoroughMap{constructor(e){if(!e)throw new Error("Map container ID is required");this.initializeElements(),this.setupEventListeners(),this.initializeState(),this.initializeData(),this.initializeMap(e),this.init()}initializeElements(){this.ui={sidebar:document.getElementById("sidebar"),boroughInfo:document.getElementById("borough-info"),resetViewBtn:document.getElementById("reset-view"),searchContainer:document.getElementById("search-container"),postcodeSearch:document.getElementById("postcode-search"),searchSpinner:document.getElementById("search-spinner"),searchClearBtn:document.getElementById("search-clear"),autocompleteDropdown:document.getElementById("autocomplete-dropdown"),searchError:document.getElementById("search-error"),isValid:!0};for(const[e,t]of Object.entries(this.ui))"isValid"===e||t||(console.error(`[MapViewer] Missing required DOM element: ${e}`),this.ui.isValid=!1);this.ui.sidebar&&this.ui.sidebar.classList.add("hidden")}setupEventListeners(){if(this.ui.resetViewBtn&&this.ui.resetViewBtn.addEventListener("click",()=>this.resetView()),this.ui.searchContainer){this.ui.searchContainer.addEventListener("click",e=>{this.state.isZoomedIn&&(e.preventDefault(),this.resetView())}),this.ui.postcodeSearch.addEventListener("click",e=>{this.state.isZoomedIn||e.stopPropagation()});const e=this.debounce(this.handlePostcodeSearch.bind(this),CONSTANTS.TIMING.DEBOUNCE_SEARCH);this.ui.postcodeSearch.addEventListener("keyup",t=>{"Escape"!==t.key?"Enter"!==t.key&&e(t.target.value):this.clearSearch()}),this.ui.postcodeSearch.addEventListener("keydown",e=>{if("Enter"===e.key){e.preventDefault();const t=this.ui.autocompleteDropdown.querySelectorAll(".autocomplete-item");1===t.length&&t[0].click()}}),this.ui.searchClearBtn.addEventListener("click",this.clearSearch.bind(this))}}initializeState(){this.state={isZoomedIn:!1,selectedBoroughKey:null,currentHoveredFeature:null,currentHoveredBoroughKey:null,currentSelectedFeature:null,currentSelectedBoroughKey:null,selectedBorough:null,interactionsEnabled:!0,searchQuery:"",searchResults:[],searchAbortController:null,zoomControl:null,optimalZoom:null,hoverPopup:null,storedPopupPosition:null,currentStyleIndex:4}}initializeData(){this.boroughData={},this.loadBoroughInfoFromHTML(),this.supportedBoroughs=new Set(Object.keys(this.boroughData))}initializeMap(e){this.map=new maplibregl.Map({container:e,center:[-.118595,51.507565],zoom:11.963,style:`https://api.maptiler.com/maps/dataviz/style.json?key=${MAPTILER_API_KEY}`,interactive:!0,attributionControl:!1,minZoom:CONSTANTS.ZOOM.MIN,maxZoom:CONSTANTS.ZOOM.MAX,boxZoom:!1,doubleClickZoom:!1,dragPan:!1,dragRotate:!1,keyboard:!1,scrollZoom:!1,touchZoomRotate:!1}),this.map.showTileBoundaries=!1,this.map.showCollisionBoxes=!1,this.map.showPadding=!1,this.map.on("load",()=>{this.addPopupStyles(),this.createStyleSwitcher()})}loadBoroughInfoFromHTML(){const e=document.querySelector(".collection-list-wrapper-2.w-dyn-list");if(!e)return;e.querySelectorAll(".w-dyn-item").forEach(e=>{const t=e.getAttribute("data-borough-id");if(!t)return;let o=t.replace("borough-","").replace(/-/g,"_");"westminister"===o&&(o="westminster");const s=this.formatBoroughName(o),r=e.querySelector("img"),a=r?r.src:"",i=e.querySelector("[data-link-container]"),n=[];i&&i.querySelectorAll("a:not(.w-dyn-bind-empty)").forEach(e=>{n.push({href:e.href,text:e.textContent.trim()})});const l=e.querySelector("[data-coverage]"),h=l?l.getAttribute("data-coverage"):"full",c=e.querySelector("[data-rich-text]"),d=c?c.innerHTML:"";o&&(this.boroughData[o]={name:s,image:a,links:n,coverage:h,richText:d})})}async init(){this.map.on("load",async()=>{await this.loadBoroughData();const e=document.getElementById("loading-overlay");e&&(e.style.display="none")})}async loadBoroughData(){try{const e=document.currentScript?.src||Array.from(document.scripts).find(e=>e.src.includes("map-viewer"))?.src||"./js/map-viewer.js",t=e.substring(0,e.lastIndexOf("/")+1)+"all_coverage_new.json",o=await fetch(t);if(!o.ok)throw new Error(`HTTP error! status: ${o.status}`);const s=await o.json();this.originalGeoJSONData=s;const r=turf.bbox(s),a=turf.centroid(s).geometry.coordinates;this.turfBoroughsBbox=[[r[0],r[1]],[r[2],r[3]]],this.turfBoroughsCentroid=a,this.map.fitBounds(this.turfBoroughsBbox,{padding:50});const i=new Set;s.features.forEach(e=>{const t=e.properties.NAME.toLowerCase().replace(/[& ]/g,"_");e.properties.borough_key=t,i.add(t)});const n=s.features.filter(e=>!e.properties?.borough_key);if(n.length>0)throw new Error(`Borough key assignment failed for ${n.length} features`);const l=Object.keys(this.boroughData).filter(e=>!i.has(e));l.length>0&&l.forEach(e=>{delete this.boroughData[e]}),this.map.getLayer("borough-labels")&&this.map.removeLayer("borough-labels"),this.map.getLayer("borough-fills")&&this.map.removeLayer("borough-fills"),this.map.getLayer("boroughs")&&this.map.removeLayer("boroughs"),this.map.getLayer("borough-borders")&&this.map.removeLayer("borough-borders"),this.map.getSource("boroughs")&&this.map.removeSource("boroughs"),this.map.addSource("boroughs",{type:"geojson",data:s,promoteId:"borough_key"}),this.addBoroughLayers(),this.generateBoroughCards()}catch(e){console.error("Failed to load map data:",e)}}setupMapInteractions(){this.map.on("mouseenter","boroughs",()=>{this.state.interactionsEnabled&&!this.state.isZoomedIn&&(this.map.getCanvas().style.cursor="pointer")}),this.map.on("mouseleave","boroughs",()=>{this.state.isZoomedIn||(this.map.getCanvas().style.cursor="")}),this.map.on("mousemove","boroughs",e=>{if(this.state.isZoomedIn)return;if(!this.state.interactionsEnabled||!e.features.length)return;const t=e.features[0],o=t.id,s=t.properties.borough_key;this.state.currentHoveredFeature!==o&&(null!==this.state.currentHoveredFeature&&this.map.setFeatureState({source:"boroughs",id:this.state.currentHoveredFeature},{hovered:!1}),this.state.currentHoveredFeature=o,this.state.currentHoveredBoroughKey=s,this.map.setFeatureState({source:"boroughs",id:o},{hovered:!0}),this.showHoverPopup(t,e.lngLat))}),this.map.on("mouseleave","boroughs",()=>{this.state.isZoomedIn||(null!==this.state.currentHoveredFeature&&(this.map.setFeatureState({source:"boroughs",id:this.state.currentHoveredFeature},{hovered:!1}),this.state.currentHoveredFeature=null,this.state.currentHoveredBoroughKey=null),this.hideHoverPopup())}),this.map.on("click","boroughs",e=>{this.state.interactionsEnabled&&e.features.length&&!this.state.isZoomedIn&&this.handleBoroughClick(e.features[0])})}formatBoroughName(e){return e&&"string"==typeof e?e.split("_").map(e=>e.charAt(0).toUpperCase()+e.slice(1)).join(" "):"Unknown Borough"}updateSidebar(e=null){if(!e)return this.ui.boroughInfo.innerHTML='\n                <div class="no-selection">\n                    <h3>Select a borough</h3>\n                <p>Click on any borough to view detailed information.</p>\n                </div>\n            ',this.ui.sidebar.classList.remove("borough-selected"),this.ui.sidebar.classList.remove("slide-in"),this.ui.sidebar.classList.add("slide-out"),void setTimeout(()=>{this.ui.sidebar.classList.add("hidden")},500);const t=e.toLowerCase().replace(/[& ]/g,"_"),o=this.boroughData[t];if(!o)return;const s=o.links&&o.links.length>0?`<div class="borough-links-container" style="display: flex; flex-direction: column; gap: 8px;">${o.links.map(e=>`\n                <a href="${e.href}" class="sidebar-link" target="_blank" rel="noopener noreferrer" style="display: flex; align-items: center; color: #3B82F6; text-decoration: none;">\n                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#3B82F6" width="16" height="16" style="margin-right: 8px; flex-shrink: 0;">\n                        <path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5-2.5-1.12 2.5-2.5 2.5z"/>\n                    </svg>\n                    <span>${e.text}</span>\n                </a>\n            `).join("")}</div>`:"";this.ui.boroughInfo.innerHTML=`\n            <div class="borough-detail">\n                <div class="borough-image">\n                    <img src="${o.image}" alt="${o.name}" loading="lazy">\n                </div>\n                <h2>${o.name}</h2>\n                <div class="borough-actions">\n                    ${s}\n                </div>\n                <hr class="separator">\n                <div class="borough-rich-text">\n                    ${o.richText}\n                </div>\n            </div>\n        `,this.ui.sidebar.classList.remove("hidden"),this.ui.sidebar.classList.add("slide-out"),this.ui.sidebar.offsetWidth,this.ui.sidebar.classList.remove("slide-out"),this.ui.sidebar.classList.add("slide-in","borough-selected")}updateSearchState(){this.state.isZoomedIn?(this.ui.searchContainer.classList.add("zoomed-in"),this.ui.postcodeSearch.placeholder="Click here to reset view"):(this.ui.searchContainer.classList.remove("zoomed-in"),this.ui.postcodeSearch.placeholder="Search by postcode...")}showHoverPopup(e,t){this.hideHoverPopup();const o=e.properties.borough_key,s=this.formatBoroughName(o),r=this.calculatePolygonCentroid(e);if(!r)return;this.state.hoverPopup=new maplibregl.Popup({closeButton:!1,closeOnClick:!1,closeOnMove:!1,anchor:"bottom",offset:[0,-10],className:"borough-hover-popup"}).setLngLat([r.lng,r.lat]).setHTML(`<div class="popup-content">${s}</div>`).addTo(this.map);const a=this.state.hoverPopup.getElement();a&&(a.style.pointerEvents="none",a.style.userSelect="none")}hideHoverPopup(){this.state.hoverPopup&&(this.state.hoverPopup.remove(),this.state.hoverPopup=null)}showPersistentPopup(){if(!this.state.isZoomedIn||!this.state.currentSelectedFeature||!this.state.storedPopupPosition)return;const e=this.formatBoroughName(this.state.currentSelectedBoroughKey);this.hideHoverPopup(),this.state.hoverPopup=new maplibregl.Popup({closeButton:!1,closeOnClick:!1,closeOnMove:!1,anchor:"bottom",offset:[0,-10],className:"borough-hover-popup"}).setLngLat(this.state.storedPopupPosition).setHTML(`<div class="popup-content">${e}</div>`).addTo(this.map);const t=this.state.hoverPopup.getElement();t&&(t.style.pointerEvents="none",t.style.userSelect="none")}addPopupStyles(){const e=document.createElement("style");e.textContent="\n            .borough-hover-popup .maplibregl-popup-content {\n                background: rgba(0, 0, 0, 0.8);\n                color: white;\n                padding: 6px 10px;\n                border-radius: 6px;\n                font-size: 13px;\n                font-weight: 500;\n                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\n                pointer-events: none !important;\n                user-select: none !important;\n                border: none;\n                min-width: auto;\n            }\n            \n            .borough-hover-popup .maplibregl-popup-tip {\n                border-top-color: rgba(0, 0, 0, 0.8);\n                pointer-events: none !important;\n            }\n            \n            .borough-hover-popup .popup-content {\n                margin: 0;\n                padding: 0;\n                white-space: nowrap;\n                pointer-events: none !important;\n                user-select: none !important;\n            }\n        ",document.head.appendChild(e)}handleBoroughClick(e){if(!this.state.interactionsEnabled||this.state.isZoomedIn)return;const t=e.properties.borough_key,o=this.formatBoroughName(t);if(this.resetSelection(),this.state.currentSelectedFeature=e.id,this.state.currentSelectedBoroughKey=t,this.state.selectedBorough=o,this.state.hoverPopup)this.state.storedPopupPosition=this.state.hoverPopup.getLngLat();else{const t=this.calculatePolygonCentroid(e);t&&(this.state.storedPopupPosition=[t.lng,t.lat])}this.map.setFeatureState({source:"boroughs",id:e.id},{hovered:!0}),this.state.currentHoveredFeature=e.id,this.state.currentHoveredBoroughKey=t,this.updateSidebar(o),this.zoomToBorough(e,()=>{})}zoomToBorough(e,t){const o=e.properties.borough_key;this.formatBoroughName(o);this.state.interactionsEnabled=!1;const s=turf.bbox(e),r=turf.centroid(e).geometry.coordinates,a=[[s[0],s[1]],[s[2],s[3]]];s&&r&&(this.map.fitBounds(a,{padding:{top:80,bottom:80,left:80,right:350},maxZoom:14,linear:!0,duration:500,essential:!0}),this.map.once("moveend",()=>{this.state.isZoomedIn=!0,this.state.interactionsEnabled=!0,this.state.optimalZoom=this.map.getZoom(),this.state.currentSelectedFeature&&this.map.setFeatureState({source:"boroughs",id:this.state.currentSelectedFeature},{hovered:!0}),this.showZoomControl(),this.showPersistentPopup(),this.ui.sidebar&&(this.ui.sidebar.classList.remove("hidden"),this.ui.sidebar.classList.add("slide-out"),this.ui.sidebar.offsetWidth,this.ui.sidebar.classList.remove("slide-out"),this.ui.sidebar.classList.add("slide-in"))}))}calculateFeatureBounds(e){try{const t=e.geometry;if(!t||!t.coordinates)return null;let o=new maplibregl.LngLatBounds;switch(t.type){case"Point":o.extend([t.coordinates[0],t.coordinates[1]]);break;case"Polygon":t.coordinates.forEach(e=>{e.forEach(e=>o.extend([e[0],e[1]]))});break;case"MultiPolygon":t.coordinates.forEach(e=>{e.forEach(e=>{e.forEach(e=>o.extend([e[0],e[1]]))})});break;default:return null}return o}catch(e){return null}}calculatePolygonCentroid(e){try{const t=e.geometry;if("Point"===t.type)return new maplibregl.LngLat(t.coordinates[0],t.coordinates[1]);let o;if("Polygon"===t.type)o=t.coordinates;else{if("MultiPolygon"!==t.type)return null;o=t.coordinates.reduce((e,t)=>this.calculatePolygonArea(t[0])>(e?this.calculatePolygonArea(e[0]):0)?t:e)}return this.calculateRingCentroid(o[0])}catch(t){const o=this.calculateFeatureBounds(e);return o?o.getCenter():null}}calculateRingCentroid(e){let t=0,o=0,s=0;const r=e.length-1;for(let a=0;a<r;a++){const i=(a+1)%r,n=e[a][0],l=e[a][1],h=e[i][0],c=e[i][1],d=n*c-h*l;t+=d,o+=(n+h)*d,s+=(l+c)*d}if(t/=2,Math.abs(t)<1e-10){const t=e.reduce((e,t)=>e+t[0],0),o=e.reduce((e,t)=>e+t[1],0);return new maplibregl.LngLat(t/r,o/r)}return new maplibregl.LngLat(o/(6*t),s/(6*t))}calculatePolygonArea(e){let t=0;const o=e.length-1;for(let s=0;s<o;s++){const r=(s+1)%o;t+=e[s][0]*e[r][1]-e[r][0]*e[s][1]}return Math.abs(t)/2}resetView(){if(this.resetSelection(),this.resetHoverStates(),this.hideHoverPopup(),this.state.storedPopupPosition=null,this.turfBoroughsBbox){const e=this.turfBoroughsBbox;this.map.fitBounds(e,{padding:50,duration:500})}else this.map.easeTo({center:[-.0912,51.5068],zoom:12.75,duration:500,essential:!0});this.state.isZoomedIn=!1,this.state.interactionsEnabled=!0,this.hideZoomControl(),this.ui.sidebar&&(this.ui.sidebar.classList.remove("slide-in"),this.ui.sidebar.classList.add("slide-out"),setTimeout(()=>{this.ui.sidebar.classList.add("hidden")},500)),this.clearSearch()}resetSelection(){if(null!==this.state.currentSelectedFeature&&this.map.getSource("boroughs")&&void 0!==this.state.currentSelectedFeature)try{this.map.setFeatureState({source:"boroughs",id:this.state.currentSelectedFeature},{hovered:!1})}catch(e){console.warn("Failed to reset feature state:",e)}this.state.currentSelectedFeature=null,this.state.currentSelectedBoroughKey=null,this.state.selectedBorough=null}resetHoverStates(){if(null!==this.state.currentHoveredFeature&&this.map.getSource("boroughs")&&void 0!==this.state.currentHoveredFeature){try{this.map.setFeatureState({source:"boroughs",id:this.state.currentHoveredFeature},{hovered:!1})}catch(e){console.warn("Failed to reset hover state:",e)}this.state.currentHoveredFeature=null,this.state.currentHoveredBoroughKey=null}}debounce(e,t){let o;return function(...s){const r=this;clearTimeout(o),o=setTimeout(()=>e.apply(r,s),t)}}clearSearch(){this.ui.postcodeSearch.value="",this.ui.autocompleteDropdown.innerHTML="",this.ui.autocompleteDropdown.classList.add("hidden"),this.ui.searchError.classList.add("hidden"),this.ui.searchClearBtn.classList.add("hidden")}clearSearchResults(){this.ui.autocompleteDropdown.innerHTML="",this.ui.autocompleteDropdown.classList.add("hidden"),this.ui.searchError.classList.add("hidden")}async handlePostcodeSearch(e){if((e=e.trim()).length<3)return this.clearSearchResults(),void(0===e.length&&this.ui.searchClearBtn.classList.add("hidden"));this.ui.searchClearBtn.classList.remove("hidden"),this.ui.searchSpinner.classList.remove("hidden"),this.ui.searchError.classList.add("hidden"),this.state.searchAbortController&&this.state.searchAbortController.abort(),this.state.searchAbortController=new AbortController;const{signal:t}=this.state.searchAbortController;try{const o=await this.fetchAutocompleteSuggestions(e,t);if(!o)return void this.displaySearchError("No suggestions found.");const s=await this.validatePostcodes(o,t);this.displaySuggestions(s)}catch(e){"AbortError"!==e.name&&this.displaySearchError("Could not fetch postcode data.")}finally{this.ui.searchSpinner.classList.add("hidden")}}async fetchAutocompleteSuggestions(e,t){const o=await fetch(`https://api.postcodes.io/postcodes/${encodeURIComponent(e)}/autocomplete?limit=10`,{signal:t});if(!o.ok)throw new Error("Autocomplete API request failed");return(await o.json()).result}async validatePostcodes(e,t){if(!e||0===e.length)return[];const o=await fetch("https://api.postcodes.io/postcodes",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({postcodes:e}),signal:t});if(!o.ok)throw new Error("Bulk validation API request failed");return(await o.json()).result.filter(e=>e.result&&this.supportedBoroughs.has(e.result.admin_district.toLowerCase().replace(/ /g,"_"))).map(e=>({postcode:e.result.postcode,borough:e.result.admin_district}))}displaySuggestions(e){this.ui.autocompleteDropdown.innerHTML="",0!==e.length?(e.forEach(e=>{const t=document.createElement("div");t.className="autocomplete-item",t.innerHTML=`<span class="autocomplete-postcode">${e.postcode}</span> <span class="autocomplete-borough">${e.borough}</span>`,t.addEventListener("click",t=>{t.stopPropagation();const o=e.borough.toLowerCase().replace(/ /g,"_"),s=this.map.querySourceFeatures("boroughs",{filter:["==",["get","borough_key"],o]});s.length>0&&this.handleBoroughClick(s[0]),this.clearSearch()}),this.ui.autocompleteDropdown.appendChild(t)}),this.ui.autocompleteDropdown.classList.remove("hidden")):this.ui.autocompleteDropdown.classList.add("hidden")}displaySearchError(e){this.ui.searchError.querySelector(".error-message").textContent=e,this.ui.searchError.classList.remove("hidden"),this.ui.autocompleteDropdown.classList.add("hidden")}showZoomControl(){if(this.state.zoomControl)return void this.state.zoomControl.classList.remove("hidden");this.state.zoomControl=document.createElement("div"),this.state.zoomControl.className="lbm-map-control custom-zoom-control",this.state.zoomControl.style.top="calc(var(--lbm-space-5) + var(--lbm-space-3) + 64px + var(--lbm-space-3))",this.state.zoomControl.innerHTML='\n                <div class="lbm-zoom-control">\n                    <button class="lbm-zoom-btn" aria-label="Zoom in">+</button>\n                    <button class="lbm-zoom-btn" aria-label="Zoom out">-</button>\n            </div>\n        ';const e=document.getElementById("map-viewport"),t=e.querySelector(".map-legend");t&&t.nextSibling?e.insertBefore(this.state.zoomControl,t.nextSibling):t?e.appendChild(this.state.zoomControl):this.map.getContainer().appendChild(this.state.zoomControl);const o=this.state.zoomControl.querySelector(".lbm-zoom-btn:first-child"),s=this.state.zoomControl.querySelector(".lbm-zoom-btn:last-child"),r=()=>{const e=this.map.getZoom(),t=this.state.optimalZoom-1;e>=this.state.optimalZoom+1?(o.disabled=!0,o.style.opacity="0.5",o.style.cursor="not-allowed"):(o.disabled=!1,o.style.opacity="1",o.style.cursor="pointer"),e<=t?(s.disabled=!0,s.style.opacity="0.5",s.style.cursor="not-allowed"):(s.disabled=!1,s.style.opacity="1",s.style.cursor="pointer")};o.addEventListener("click",()=>{if(o.disabled)return;const e=this.state.optimalZoom+1;let t=Math.min(this.map.getZoom()+.5,e);this.map.easeTo({zoom:t,duration:400,essential:!0})}),s.addEventListener("click",()=>{if(s.disabled)return;const e=this.state.optimalZoom-1;let t=Math.max(this.map.getZoom()-.5,e);this.map.easeTo({zoom:t,duration:400,essential:!0})}),this._zoomButtonUpdateHandler=r,this.map.on("zoom",this._zoomButtonUpdateHandler),r(),this._zoomWheelHandler=e=>{if(!this.state.isZoomedIn)return;e.preventDefault();const t=e.deltaY<0?.5:-.5,o=this.state.optimalZoom-1,s=this.state.optimalZoom+1;let r=this.map.getZoom()+t;r=Math.max(o,Math.min(s,r)),this.map.easeTo({zoom:r,duration:200,essential:!0})},this.map.getContainer().addEventListener("wheel",this._zoomWheelHandler,{passive:!1})}hideZoomControl(){this.state.zoomControl&&this.state.zoomControl.classList.add("hidden"),this._zoomWheelHandler&&this.map.getContainer().removeEventListener("wheel",this._zoomWheelHandler),this._zoomButtonUpdateHandler&&this.map.off("zoom",this._zoomButtonUpdateHandler)}generateBoroughCards(){const e=document.getElementById("cards-grid");document.getElementById("cards-viewport");e?(e.innerHTML="",Object.keys(this.boroughData).forEach(t=>{const o=this.boroughData[t],s=this.createBoroughCard(t,o);e.appendChild(s)})):console.warn("Cards grid element not found")}createBoroughCard(e,t){const o=document.createElement("div");o.className="borough-card",o.dataset.borough=e;const s=t.links&&t.links.length>0?t.links.map(e=>`\n                <a href="${e.href}" target="_blank" rel="noopener noreferrer" class="borough-card-link">\n                    ${e.text}\n                </a>\n            `).join(""):"";return o.innerHTML=`\n            <div class="borough-card-title">${t.name}</div>\n            <div class="borough-card-image">\n                <img src="${t.image}" alt="${t.name}" loading="lazy" />\n            </div>\n            <div class="borough-card-info">\n                ${s?`<div class="borough-card-links">${s}</div>`:""}\n            </div>\n        `,o}createStyleSwitcher(){const e=document.getElementById("style-switcher-container");e&&(e.className="lbm-map-control style-switcher",e.style.top="calc(var(--lbm-space-5) + 64px + var(--lbm-space-3))",e.innerHTML=`\n            <div class="lbm-p-md">\n                <h3 class="lbm-map-control__title">\n                    ${CONSTANTS.MAPTILER_STYLES[this.state.currentStyleIndex].name}\n                </h3>\n                <button class="lbm-btn lbm-btn--primary lbm-btn--full lbm-text-xs">\n                    Next Style\n                </button>\n            </div>\n        `,e.querySelector("button").addEventListener("click",()=>{this.cycleMapStyle()}))}cycleMapStyle(){this.state.currentStyleIndex=(this.state.currentStyleIndex+1)%CONSTANTS.MAPTILER_STYLES.length;const e=CONSTANTS.MAPTILER_STYLES[this.state.currentStyleIndex],t=document.querySelector(".lbm-map-control__title");t&&(t.textContent=e.name),e.isCustom?this.createCustomStyle(e):(this.map.setStyle(e.url),this.map.once("styledata",()=>{this.originalGeoJSONData&&this.addBoroughLayers()}))}async createCustomStyle(e){try{const t=e.baseStyle,o=e.textStyle,s=`https://api.maptiler.com/maps/${t}/style.json?key=${MAPTILER_API_KEY}`,r=`https://api.maptiler.com/maps/${o}-v2/style.json?key=${MAPTILER_API_KEY}`,[a,i]=await Promise.all([fetch(s),fetch(r)]),n=await a.json(),l=await i.json(),h=l.layers.filter(e=>"symbol"===e.type&&e.layout&&e.layout["text-field"]).map((e,t)=>({...e,id:`custom-text-${e.id}-${t}`})),c={...n,sources:{...n.sources,...l.sources},layers:[...n.layers,...h]};this.map.setStyle(c),this.map.once("styledata",()=>{this.originalGeoJSONData&&this.addBoroughLayers()})}catch(e){console.error("Failed to create custom style:",e),this.map.setStyle(CONSTANTS.MAPTILER_STYLES[4].url),this.map.once("styledata",()=>{this.originalGeoJSONData&&this.addBoroughLayers()})}}addBoroughLayers(){this.map.getLayer("boroughs")&&this.map.removeLayer("boroughs"),this.map.getLayer("borough-borders")&&this.map.removeLayer("borough-borders"),this.map.getSource("boroughs")||this.map.addSource("boroughs",{type:"geojson",data:this.originalGeoJSONData,promoteId:"borough_key"});const e=this.map.getStyle();let t=null;if(e&&e.layers)for(const o of e.layers)if("symbol"===o.type&&o.layout&&o.layout["text-field"]){t=o.id;break}this.map.addLayer({id:"boroughs",type:"fill",source:"boroughs",layout:{},paint:{"fill-color":["case",["boolean",["feature-state","hovered"],!1],CONSTANTS.COLORS.HOVER,CONSTANTS.COLORS.BASE],"fill-opacity":.7}},t),this.map.addLayer({id:"borough-borders",type:"line",source:"boroughs",layout:{},paint:{"line-color":CONSTANTS.COLORS.BORDER,"line-width":2,"line-opacity":.8}},t),this.setupMapInteractions()}}document.addEventListener("DOMContentLoaded",()=>{setTimeout(()=>{window.mapViewer=new MapLibreBoroughMap("map")},100)});